### Conversa – mini scénarios .http (Auth, Languages, Partners, Events, Bookings, Payments)
### Prérequis:
### - DJANGO_ENABLE_PAYMENT_SIMULATOR=1  (ou ENABLE_PAYMENT_SIMULATOR=1)
### - STRIPE_SECRET_KEY (clé test)
### - Fixtures: Languages (codes actifs), Partners (≥1 actif)
### - Extension VS Code "REST Client"

### ============================================================
### 0) ENV
### ============================================================
@HOST = http://localhost:8000
@BASE = {{HOST}}/api/v1
@AUTH = {{BASE}}/auth
@LANGS = {{BASE}}/languages
@PARTNERS = {{BASE}}/partners
@EVENTS = {{BASE}}/events
@BOOKINGS = {{BASE}}/bookings
@PAYMENTS = {{BASE}}/payments
@RETURN_URL = http://localhost:3000/stripe/return

# Mails (exemples fixes ; adapte si collision)
@ORG_EMAIL = org_30@example.com
@PART_EMAIL = part_31@example.com
@PWD = P@ssword1234

# Codes langues exigés par /auth/register (via fixtures)
@ORG_NATIVE = fr
@ORG_TARGET = en
@PART_NATIVE = en
@PART_TARGET = fr

# IDs simples (évite les JSONPath dynamiques)
@PARTNER_ID = 1
@LANG_ID = 1
###

### ============================================================
### A) LANGUAGES — lister les codes actifs (no auth)
### ============================================================
# @name langs_list
GET {{LANGS}}/
###

### ============================================================
### B) AUTH (ORGANISATEUR) — register + login + me
### ============================================================
# @name org_register
POST {{AUTH}}/register/
Content-Type: application/json

{
  "email": "{{ORG_EMAIL}}",
  "password": "{{PWD}}",
  "first_name": "Org",
  "last_name": "Owner",
  "age": 21,
  "consent_given": true,
  "native_langs": ["{{ORG_NATIVE}}"],
  "target_langs": ["{{ORG_TARGET}}"]
}
###

# @name org_login
POST {{AUTH}}/login/
Content-Type: application/json

{
  "email": "{{ORG_EMAIL}}",
  "password": "{{PWD}}"
}
###

# @name org_me
GET {{AUTH}}/me/
Authorization: Bearer {{org_login.response.body.$.access}}
###

### ============================================================
### C) PARTNERS — lister (auth requise)
### ============================================================
# @name partners_list
GET {{PARTNERS}}/
Authorization: Bearer {{org_login.response.body.$.access}}
###

# (optionnel) détail du partner choisi
GET {{PARTNERS}}/{{PARTNER_ID}}/
Authorization: Bearer {{org_login.response.body.$.access}}
###

### ============================================================
### D) EVENTS (ORGA) — créer DRAFT (+ auto-booking PENDING)
### ============================================================
# @name ev_create
POST {{EVENTS}}/
Authorization: Bearer {{org_login.response.body.$.access}}
Content-Type: application/json

{
  "partner": {{PARTNER_ID}},
  "language": {{LANG_ID}},
  "theme": "Soirée FR {{$timestamp}}",
  "difficulty": "easy",
  "datetime_start": "2099-12-31T20:00:00Z"
}
###

# Détail (doit être DRAFT)
GET {{EVENTS}}/{{ev_create.response.body.$.id}}/
Authorization: Bearer {{org_login.response.body.$.access}}
###

# Auto-booking ORGANISATEUR (PENDING) pour cet event
# @name org_pending
GET {{BOOKINGS}}/?status=PENDING&event={{ev_create.response.body.$.id}}
Authorization: Bearer {{org_login.response.body.$.access}}
###

### ============================================================
### E) PAYMENTS (ORGA) — create-intent + simulateur → event PUBLISHED
### ============================================================
# (optionnel) config Stripe (AllowAny)
GET {{PAYMENTS}}/config/
###

# @name org_ci
POST {{PAYMENTS}}/create-intent/
Authorization: Bearer {{org_login.response.body.$.access}}
Content-Type: application/json

{
  "booking": {{org_pending.response.body.$.results[0].id}},
  "return_url": "{{RETURN_URL}}"
}
###

# Confirmer via simulateur unique (UUID requis)
POST {{PAYMENTS}}/sim/confirm/
Authorization: Bearer {{org_login.response.body.$.access}}
Content-Type: application/json

{
  "booking_public_id": "{{org_pending.response.body.$.results[0].public_id}}",
  "payment_method": "pm_card_visa",
  "return_url": "{{RETURN_URL}}"
}
###

# Vérifs: booking CONFIRMED, event PUBLISHED
GET {{BOOKINGS}}/{{org_pending.response.body.$.results[0].public_id}}/
Authorization: Bearer {{org_login.response.body.$.access}}
###

GET {{EVENTS}}/{{ev_create.response.body.$.id}}/
Authorization: Bearer {{org_login.response.body.$.access}}
###

### ============================================================
### F) AUTH (PARTICIPANT) — register + login + me
### ============================================================
# @name part_register
POST {{AUTH}}/register/
Content-Type: application/json

{
  "email": "{{PART_EMAIL}}",
  "password": "{{PWD}}",
  "first_name": "Pat",
  "last_name": "User",
  "age": 22,
  "consent_given": true,
  "native_langs": ["{{PART_NATIVE}}"],
  "target_langs": ["{{PART_TARGET}}"]
}
###

# @name part_login
POST {{AUTH}}/login/
Content-Type: application/json

{
  "email": "{{PART_EMAIL}}",
  "password": "{{PWD}}"
}
###

GET {{AUTH}}/me/
Authorization: Bearer {{part_login.response.body.$.access}}
###

### ============================================================
### G) BOOKINGS (PARTICIPANT) — créer + payer (simulateur)
### ============================================================
# @name part_booking_create
POST {{BOOKINGS}}/
Authorization: Bearer {{part_login.response.body.$.access}}
Content-Type: application/json

{
  "event": {{ev_create.response.body.$.id}}
}
###

# @name part_ci
POST {{PAYMENTS}}/create-intent/
Authorization: Bearer {{part_login.response.body.$.access}}
Content-Type: application/json

{
  "booking": {{part_booking_create.response.body.$.id}},
  "return_url": "{{RETURN_URL}}"
}
###

POST {{PAYMENTS}}/sim/confirm/
Authorization: Bearer {{part_login.response.body.$.access}}
Content-Type: application/json

{
  "booking_public_id": "{{part_booking_create.response.body.$.public_id}}",
  "payment_method": "pm_card_visa",
  "return_url": "{{RETURN_URL}}"
}
###

# Vérif: booking participant CONFIRMED
GET {{BOOKINGS}}/{{part_booking_create.response.body.$.public_id}}/
Authorization: Bearer {{part_login.response.body.$.access}}
###

# Mes bookings filtrés par event
GET {{BOOKINGS}}/?event={{ev_create.response.body.$.id}}
Authorization: Bearer {{part_login.response.body.$.access}}
###

# (règle) re-book même event (attendu: 400)
POST {{BOOKINGS}}/
Authorization: Bearer {{part_login.response.body.$.access}}
Content-Type: application/json

{
  "event": {{ev_create.response.body.$.id}}
}
###

### ============================================================
### H) ANNULATION — par l’organisateur (cascade → CANCELLED)
### ============================================================
POST {{EVENTS}}/{{ev_create.response.body.$.id}}/cancel/
Authorization: Bearer {{org_login.response.body.$.access}}
###

# Vérifier l’état des bookings côté participant
GET {{BOOKINGS}}/?event={{ev_create.response.body.$.id}}
Authorization: Bearer {{part_login.response.body.$.access}}
###

# Vérifier côté organisateur
GET {{BOOKINGS}}/?event={{ev_create.response.body.$.id}}
Authorization: Bearer {{org_login.response.body.$.access}}
###
