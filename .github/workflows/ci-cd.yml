name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ${{ github.repository }}/backend
  IMAGE_FRONTEND: ${{ github.repository }}/frontend
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'docker/Dockerfile.backend'
            frontend:
              - 'frontend/**'
              - 'docker/Dockerfile.frontend'
              - 'docker/nginx/**'

  test-backend:
    name: Test backend
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: conversa_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres -d conversa_db"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
      - name: Lint (ruff)
        working-directory: backend
        run: |
          ruff --version
          ruff check . --output-format=github
          ruff format --check .
      - name: Migrate (CI DB)
        env:
          DJANGO_SETTINGS_MODULE: config.settings.dev
          DEBUG: "True"
          SECRET_KEY: test-key
          DJANGO_DB_ENGINE: django.db.backends.postgresql
          DJANGO_DB_NAME: conversa_db
          DJANGO_DB_USER: postgres
          DJANGO_DB_PASSWORD: postgres
          DJANGO_DB_HOST: localhost
          DJANGO_DB_PORT: "5432"
        working-directory: backend
        run: python manage.py migrate --noinput
      - name: Run tests
        env:
          DJANGO_SETTINGS_MODULE: config.settings.dev
          DEBUG: "True"
          SECRET_KEY: test-key
          DJANGO_DB_ENGINE: django.db.backends.postgresql
          DJANGO_DB_NAME: conversa_db
          DJANGO_DB_USER: postgres
          DJANGO_DB_PASSWORD: postgres
          DJANGO_DB_HOST: localhost
          DJANGO_DB_PORT: "5432"
        working-directory: backend
        run: pytest -q

  test-frontend:
    name: Test frontend
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install & build
        working-directory: frontend
        run: |
          npm ci
          npm run build

  build-backend:
    name: Build & push backend image
    needs: [changes, test-backend]
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    outputs:
      IMAGE_REF: ${{ steps.out.outputs.TAG_SHA }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND }}
          tags: |
            type=raw,value=latest
            type=sha
      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.backend
          target: prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Export backend SHA tag
        id: out
        run: |
          echo "TAG_SHA=$(echo '${{ steps.meta.outputs.tags }}' | tr ' ' '\n' | grep sha- | head -n1)" >> $GITHUB_OUTPUT

  build-frontend:
    name: Build & push frontend image
    needs: [changes, test-frontend]
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    outputs:
      IMAGE_REF: ${{ steps.out.outputs.TAG_SHA }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND }}
          tags: |
            type=raw,value=latest
            type=sha
      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.frontend
          target: prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Export frontend SHA tag
        id: out
        run: |
          echo "TAG_SHA=$(echo '${{ steps.meta.outputs.tags }}' | tr ' ' '\n' | grep sha- | head -n1)" >> $GITHUB_OUTPUT

  migrate-and-deploy:
    name: Migrate DB and deploy to Render
    needs: [changes, build-backend, build-frontend]
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Migrate using backend image (prod DB)
        if: needs.changes.outputs.backend == 'true'
        env:
          DJANGO_SETTINGS_MODULE: config.settings.prod
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DJANGO_DB_ENGINE: django.db.backends.postgresql
          DJANGO_DB_NAME: ${{ secrets.DJANGO_DB_NAME }}
          DJANGO_DB_USER: ${{ secrets.DJANGO_DB_USER }}
          DJANGO_DB_PASSWORD: ${{ secrets.DJANGO_DB_PASSWORD }}
          DJANGO_DB_HOST: ${{ secrets.DJANGO_DB_HOST }}
          DJANGO_DB_PORT: ${{ secrets.DJANGO_DB_PORT }}
          DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
          DJANGO_TIME_ZONE: Europe/Brussels
        run: |
          REF="${{ needs.build-backend.outputs.IMAGE_REF }}"
          echo "Pulling $REF"
          docker pull "$REF"
          docker run --rm \
            -e DJANGO_SETTINGS_MODULE="$DJANGO_SETTINGS_MODULE" \
            -e SECRET_KEY="$SECRET_KEY" \
            -e DJANGO_DB_ENGINE="$DJANGO_DB_ENGINE" \
            -e DJANGO_DB_NAME="$DJANGO_DB_NAME" \
            -e DJANGO_DB_USER="$DJANGO_DB_USER" \
            -e DJANGO_DB_PASSWORD="$DJANGO_DB_PASSWORD" \
            -e DJANGO_DB_HOST="$DJANGO_DB_HOST" \
            -e DJANGO_DB_PORT="$DJANGO_DB_PORT" \
            -e DJANGO_ALLOWED_HOSTS="$DJANGO_ALLOWED_HOSTS" \
            -e DJANGO_TIME_ZONE="$DJANGO_TIME_ZONE" \
            "$REF" python manage.py migrate --noinput

      - name: Trigger Render deploy (backend)
        if: needs.changes.outputs.backend == 'true'
        run: curl -fsSL -X POST "${{ secrets.RENDER_DEPLOY_HOOK_BACKEND_URL }}"

      - name: Trigger Render deploy (frontend)
        if: needs.changes.outputs.frontend == 'true'
        run: curl -fsSL -X POST "${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND_URL }}"

      - name: Wait & health check backend
        if: needs.changes.outputs.backend == 'true'
        run: |
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "${{ vars.BACKEND_HEALTH_URL }}")
            if [ "$code" = "200" ]; then
              echo "Backend healthy"
              exit 0
            fi
            echo "Waiting for backend... ($i)"
            sleep 10
          done
          echo "Backend health check failed"
          exit 1

      - name: Wait & health check frontend
        if: needs.changes.outputs.frontend == 'true'
        run: |
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "${{ vars.FRONTEND_URL }}")
            if [ "$code" = "200" ]; then
              echo "Frontend reachable"
              exit 0
            fi
            echo "Waiting for frontend... ($i)"
            sleep 10
          done
          echo "Frontend health check failed"
          exit 1
