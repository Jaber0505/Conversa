name: CI/CD Pipeline - Conversa

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      VERSION: ${{ github.sha }}
      DJANGO_SETTINGS_MODULE: config.settings.ci
      
    steps:
      - name: üõé Checkout code
        uses: actions/checkout@v3

      - name: üêç Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: üíæ Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üì¶ Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements/ci.txt

      - name: üîç Verify database migrations
        run: python backend/manage.py makemigrations --check --dry-run

      - name: üöß Run migration dry-run (plan only)
        run: python backend/manage.py migrate --plan --database=default

      - name: üßπ Install lint tools
        run: pip install ruff

      - name: üßΩ Run linter (auto-fix) on backend
        run: ruff check backend --fix --output-format github

      - name: üß™ Run tests with coverage
        working-directory: backend
        run: pytest --cov=. --cov-report=term --cov-report=xml

      - name: üì§ Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: backend/coverage.xml
          fail_ci_if_error: true

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: üõé Checkout code
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: üíæ Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: üîß Normalize image prefix (lowercase)
        run: |
          echo "IMAGE_PREFIX=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: üîê Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üê≥ Build and push backend image
        run: |
          docker build \
            --build-arg REQUIREMENTS_FILE=requirements/prod.txt \
            --target final \
            -t ${{ env.IMAGE_PREFIX }}-backend:latest \
            -t ${{ env.IMAGE_PREFIX }}-backend:${{ env.VERSION }} \
            -f docker/Dockerfile.backend .
          docker push ${{ env.IMAGE_PREFIX }}-backend:latest
          docker push ${{ env.IMAGE_PREFIX }}-backend:${{ env.VERSION }}

      - name: üê≥ Build and push frontend image
        run: |
          docker build \
            --target prod \
            -t ${{ env.IMAGE_PREFIX }}-frontend:latest \
            -t ${{ env.IMAGE_PREFIX }}-frontend:${{ env.VERSION }} \
            -f docker/Dockerfile.frontend .
          docker push ${{ env.IMAGE_PREFIX }}-frontend:latest
          docker push ${{ env.IMAGE_PREFIX }}-frontend:${{ env.VERSION }}

      - name: üßπ Clean up Docker images (optional)
        if: always()
        run: docker image prune -f

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ needs.test.result == 'success' && needs.build-and-push.result == 'success' }}

    steps:
      - name: üöÄ Trigger Render deployment
        uses: actions/github-script@v6
        with:
          script: |
            await fetch(process.env.RENDER_DEPLOY_HOOK_URL, { method: 'POST' });
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
