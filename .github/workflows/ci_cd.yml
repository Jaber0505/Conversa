name: CI/CD Pipeline - Conversa

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io  # ✅ Cette seule variable est permise globalement

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      IMAGE_PREFIX: ${{ env.REGISTRY }}/${{ github.repository }}
      VERSION: ${{ github.sha }}

    steps:
      - name: 🛎 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: 💾 Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements/ci.txt

      - name: 🔍 Verify database migrations
        run: python backend/manage.py makemigrations --check --dry-run

      - name: 🧹 Install lint tools
        run: pip install ruff

      - name: 🧽 Run linter on backend
        run: ruff backend

      - name: 🧪 Run tests with coverage
        working-directory: backend
        run: pytest --cov=. --cov-report=term --cov-report=xml

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: backend/coverage.xml
          fail_ci_if_error: true

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    env:
      IMAGE_PREFIX: ${{ env.REGISTRY }}/${{ github.repository }}
      VERSION: ${{ github.sha }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: 🛎 Checkout code
        uses: actions/checkout@v3

      - name: ⚙️ Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 💾 Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Build and push backend image
        run: |
          docker build \
            --build-arg REQUIREMENTS_FILE=requirements/prod.txt \
            --target final \
            -t $IMAGE_PREFIX-backend:latest \
            -t $IMAGE_PREFIX-backend:$VERSION \
            -f docker/Dockerfile.backend .
          docker push $IMAGE_PREFIX-backend:latest
          docker push $IMAGE_PREFIX-backend:$VERSION

      - name: 🐳 Build and push frontend image
        run: |
          docker build \
            --target prod \
            -t $IMAGE_PREFIX-frontend:latest \
            -t $IMAGE_PREFIX-frontend:$VERSION \
            -f docker/Dockerfile.frontend .
          docker push $IMAGE_PREFIX-frontend:latest
          docker push $IMAGE_PREFIX-frontend:$VERSION

      - name: 🧹 Clean up Docker images (optional)
        if: always()
        run: docker image prune -f

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    if: ${{ needs.test.result == 'success' && needs.build-and-push.result == 'success' }}

    steps:
      - name: 🚀 Trigger Render deployment
        uses: actions/github-script@v6
        with:
          script: |
            const fetch = require('node-fetch');
            await fetch(process.env.RENDER_DEPLOY_HOOK_URL, { method: 'POST' });
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
