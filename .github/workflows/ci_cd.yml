name: CI/CD Pipeline - Conversa

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: config.settings.ci
      DEBUG: ${{ secrets.CI_DEBUG }}
      SECRET_KEY: ${{ secrets.CI_SECRET_KEY }}
      DJANGO_ALLOWED_HOSTS: ${{ secrets.CI_DJANGO_ALLOWED_HOSTS }}
      DJANGO_SU_NAME: ${{ secrets.CI_DJANGO_SU_NAME }}
      DJANGO_SU_PASSWORD: ${{ secrets.CI_DJANGO_SU_PASSWORD }}
      DJANGO_SU_EMAIL: ${{ secrets.CI_DJANGO_SU_EMAIL }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üì¶ Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r backend/requirements/ci.txt
          pip install safety

      - name: üîê Safety check
        run: safety check --full-report --ignore=50257

      - name: üîç Check migrations
        run: |
          python backend/manage.py makemigrations --check --dry-run
          python backend/manage.py migrate --plan --database=default

      - name: üßπ Lint
        run: ruff check backend --output-format github

      - name: üß™ Run tests
        working-directory: backend
        run: pytest

      - name: üìä Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: backend/coverage.xml
          fail_ci_if_error: true

  migrate:
    name: Migrations
    runs-on: ubuntu-latest
    needs: test

    env:
      DJANGO_SETTINGS_MODULE: config.settings.prod
      DEBUG: ${{ secrets.DEBUG }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
      DJANGO_DB_ENGINE: ${{ secrets.DJANGO_DB_ENGINE }}
      DJANGO_DB_NAME: ${{ secrets.DJANGO_DB_NAME }}
      DJANGO_DB_USER: ${{ secrets.DJANGO_DB_USER }}
      DJANGO_DB_PASSWORD: ${{ secrets.DJANGO_DB_PASSWORD }}
      DJANGO_DB_HOST: ${{ secrets.DJANGO_DB_HOST }}
      DJANGO_DB_PORT: ${{ secrets.DJANGO_DB_PORT }}
      DJANGO_SU_NAME: ${{ secrets.DJANGO_SU_NAME }}
      DJANGO_SU_EMAIL: ${{ secrets.DJANGO_SU_EMAIL }}
      DJANGO_SU_PASSWORD: ${{ secrets.DJANGO_SU_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: üì¶ Install dependencies
        run: pip install -r backend/requirements/prod.txt

      - name: üîç Check DB integrity
        id: check_db
        working-directory: backend
        run: |
          set +e
          echo "SELECT * FROM django_migrations LIMIT 1;" | python manage.py dbshell > db_check.log 2>&1
          if grep -q "does not exist" db_check.log; then
            echo "db_needs_reset=true" >> $GITHUB_OUTPUT
          else
            echo "db_needs_reset=false" >> $GITHUB_OUTPUT
          fi
          set -e

      - name: üö® DB is empty
        if: steps.check_db.outputs.db_needs_reset == 'true'
        run: |
          echo "‚ùå Table django_migrations absente. Intervention requise."
          exit 1

      - name: üõ†Ô∏è Apply migrations
        working-directory: backend
        run: python manage.py migrate --noinput

      - name: üìã Show migrations
        working-directory: backend
        run: python manage.py showmigrations

      - name: üìä List PostgreSQL tables
        working-directory: backend
        run: echo "\dt" | python manage.py dbshell | tee tables.log

      - name: üì§ Upload DB logs if failed
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: db-tables-log
          path: backend/tables.log

      - name: üëë Create superuser if needed
        working-directory: backend
        run: |
          echo "from django.contrib.auth import get_user_model
          import os
          User = get_user_model()
          if not User.objects.filter(email=os.getenv('DJANGO_SU_EMAIL')).exists():
            User.objects.create_superuser(
                username=os.getenv('DJANGO_SU_NAME'),
                email=os.getenv('DJANGO_SU_EMAIL'),
                password=os.getenv('DJANGO_SU_PASSWORD')
            )
            print('‚úÖ Superuser created.')
          else:
            print('‚ÑπÔ∏è Superuser already exists.')" | python manage.py shell

  build-push:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: migrate
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - uses: docker/setup-buildx-action@v2

      - uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: üßæ Define image tags
        run: |
          echo "IMAGE_PREFIX=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_SHA}" >> $GITHUB_ENV

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üê≥ Build & push backend
        run: |
          docker build \
            --build-arg REQUIREMENTS_FILE=requirements/prod.txt \
            --target final \
            -t ${{ env.IMAGE_PREFIX }}-backend:latest \
            -t ${{ env.IMAGE_PREFIX }}-backend:${{ env.VERSION }} \
            -f docker/Dockerfile.backend .
          docker push ${{ env.IMAGE_PREFIX }}-backend:latest
          docker push ${{ env.IMAGE_PREFIX }}-backend:${{ env.VERSION }}

      - name: üê≥ Build & push frontend
        run: |
          docker build \
            --target prod \
            -t ${{ env.IMAGE_PREFIX }}-frontend:latest \
            -t ${{ env.IMAGE_PREFIX }}-frontend:${{ env.VERSION }} \
            -f docker/Dockerfile.frontend .
          docker push ${{ env.IMAGE_PREFIX }}-frontend:latest
          docker push ${{ env.IMAGE_PREFIX }}-frontend:${{ env.VERSION }}

      - if: always()
        run: docker image prune -f

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: build-push

    steps:
      - name: ‚è≥ Delay for Render
        run: sleep 10

      - name: üöÄ Trigger Backend
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const res = await fetch(process.env.RENDER_DEPLOY_HOOK_BACKEND_URL, { method: 'POST' });
              if (!res.ok) throw new Error(`HTTP ${res.status}`);
              console.log("‚úÖ Backend hook triggered.");
            } catch (e) {
              core.setFailed("‚ùå Backend deploy failed: " + e.message);
            }
        env:
          RENDER_DEPLOY_HOOK_BACKEND_URL: ${{ secrets.RENDER_DEPLOY_HOOK_BACKEND_URL }}

      - name: üöÄ Trigger Frontend
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const res = await fetch(process.env.RENDER_DEPLOY_HOOK_FRONTEND_URL, { method: 'POST' });
              if (!res.ok) throw new Error(`HTTP ${res.status}`);
              console.log("‚úÖ Frontend hook triggered.");
            } catch (e) {
              core.setFailed("‚ùå Frontend deploy failed: " + e.message);
            }
        env:
          RENDER_DEPLOY_HOOK_FRONTEND_URL: ${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND_URL }}
