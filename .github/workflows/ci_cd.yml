name: CI/CD Pipeline - Conversa

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      VERSION: ${{ github.sha }}
      DJANGO_SETTINGS_MODULE: config.settings.ci
      DEBUG: ${{ secrets.CI_DEBUG }}
      SECRET_KEY: ${{ secrets.CI_SECRET_KEY }}
      DJANGO_ALLOWED_HOSTS: ${{ secrets.CI_DJANGO_ALLOWED_HOSTS }}
      DJANGO_SU_NAME: ${{ secrets.CI_DJANGO_SU_NAME }}
      DJANGO_SU_PASSWORD: ${{ secrets.CI_DJANGO_SU_PASSWORD }}
      DJANGO_SU_EMAIL: ${{ secrets.CI_DJANGO_SU_EMAIL }}

    steps:
      - name: 🛎 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: 💾 Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements/ci.txt

      - name: 🔍 Verify database migrations
        run: python backend/manage.py makemigrations --check --dry-run

      - name: 🚧 Run migration dry-run (plan only)
        run: python backend/manage.py migrate --plan --database=default

      - name: 🧹 Install lint tools
        run: pip install ruff

      - name: 🧽 Run linter (auto-fix) on backend
        run: ruff check backend --fix --output-format github

      - name: 🧪 Run tests with coverage
        working-directory: backend
        run: pytest --cov=. --cov-report=term --cov-report=xml

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: backend/coverage.xml
          fail_ci_if_error: true

  migrate:
    name: 🔁 Migrations fiables (avec détection)
    runs-on: ubuntu-latest
    needs: test

    env:
      DJANGO_SETTINGS_MODULE: config.settings.prod
      DEBUG: ${{ secrets.DEBUG }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
      DJANGO_DB_ENGINE: ${{ secrets.DJANGO_DB_ENGINE }}
      DJANGO_DB_NAME: ${{ secrets.DJANGO_DB_NAME }}
      DJANGO_DB_USER: ${{ secrets.DJANGO_DB_USER }}
      DJANGO_DB_PASSWORD: ${{ secrets.DJANGO_DB_PASSWORD }}
      DJANGO_DB_HOST: ${{ secrets.DJANGO_DB_HOST }}
      DJANGO_DB_PORT: ${{ secrets.DJANGO_DB_PORT }}
      DJANGO_SU_NAME: ${{ secrets.DJANGO_SU_NAME }}
      DJANGO_SU_EMAIL: ${{ secrets.DJANGO_SU_EMAIL }}
      DJANGO_SU_PASSWORD: ${{ secrets.DJANGO_SU_PASSWORD }}

    steps:
      - name: 🛎 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: 📦 Install dependencies
        run: pip install -r backend/requirements/prod.txt

      - name: ❓ Check if 'auth_user' table exists
        working-directory: backend
        id: check_db_state
        run: |
          set +e
          echo "SELECT count(*) FROM auth_user;" | python manage.py dbshell > check_db.log 2>&1
          if grep -q "does not exist" check_db.log; then
            echo "auth_user_absent=true" >> $GITHUB_OUTPUT
          else
            echo "auth_user_absent=false" >> $GITHUB_OUTPUT
          fi
          set -e

      - name: 🧹 Reset migration state if broken
        if: steps.check_db_state.outputs.auth_user_absent == 'true'
        working-directory: backend
        run: |
          echo "⚠️ Table auth_user manquante. Suppression des traces de migration..."
          echo "DELETE FROM django_migrations;" | python manage.py dbshell

      - name: 🔍 Check for unapplied model changes
        working-directory: backend
        run: |
          python manage.py makemigrations --check --dry-run

      - name: 🧱 Apply migrations (clean)
        working-directory: backend
        run: |
          python manage.py migrate --noinput

      - name: 🔬 Show applied migrations
        working-directory: backend
        run: python manage.py showmigrations

      - name: 🧾 List all tables after migration
        working-directory: backend
        run: echo "\dt" | python manage.py dbshell

      - name: 👑 Create superuser if missing
        working-directory: backend
        run: |
          python manage.py shell <<EOF
          from django.contrib.auth import get_user_model
          import os
          User = get_user_model()
          username = os.getenv("DJANGO_SU_NAME")
          email = os.getenv("DJANGO_SU_EMAIL")
          password = os.getenv("DJANGO_SU_PASSWORD")

          if not all([username, email, password]):
              print("❌ Missing superuser env vars. Skipping.")
          elif not User.objects.filter(email=email).exists():
              User.objects.create_superuser(username=username, email=email, password=password)
              print("✅ Superuser created:", email)
          else:
              print("ℹ️ Superuser already exists:", email)
          EOF


  deploy:
    runs-on: ubuntu-latest
    needs: build-push

    steps:
      - name: 🚀 Trigger Render deployment (Backend)
        uses: actions/github-script@v6
        with:
          script: |
            await fetch(process.env.RENDER_DEPLOY_HOOK_BACKEND_URL, { method: 'POST' });
        env:
          RENDER_DEPLOY_HOOK_BACKEND_URL: ${{ secrets.RENDER_DEPLOY_HOOK_BACKEND_URL }}

      - name: 🚀 Trigger Render deployment (Frontend)
        uses: actions/github-script@v6
        with:
          script: |
            await fetch(process.env.RENDER_DEPLOY_HOOK_FRONTEND_URL, { method: 'POST' });
        env:
          RENDER_DEPLOY_HOOK_FRONTEND_URL: ${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND_URL }}