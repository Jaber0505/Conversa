services:
  db:
    image: postgres:15-alpine
    restart: always
    env_file: [./env/.env.dev]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks: [conversa]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-conversa_db}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  backend:
    build:
      context: ../
      dockerfile: docker/Dockerfile.backend
      args:
        REQUIREMENTS_FILE: requirements/dev.txt
    environment:
      ENV_MODE: development
    env_file: [./env/.env.dev]
    working_dir: /app/backend
    volumes:
      - ../backend:/app/backend
    ports: ["8000:8000"]
    depends_on:
      db: { condition: service_healthy }
    networks: [conversa]

  frontend:
    build:
      context: ../
      dockerfile: docker/Dockerfile.frontend
      target: dev
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
    working_dir: /app
    volumes:
      - ../frontend:/app
      - node_modules_frontend:/app/node_modules
    ports: ["5173:5173"]
    command: sh -lc "npm run dev -- --host 0.0.0.0 --port 5173"
    depends_on:
      backend: { condition: service_started }
    networks: [conversa]


  pgadmin:
    image: dpage/pgadmin4:latest
    pull_policy: always
    env_file: [./env/.env.dev]
    ports: ["5050:80"]
    depends_on:
      db: { condition: service_healthy }
    networks: [conversa]

volumes:
  postgres_data:
  node_modules_frontend:

networks:
  conversa:
