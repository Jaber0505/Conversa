# ---- BUILDER : compile les deps (si roues C natives) ----
FROM python:3.11-slim AS builder
ENV PIP_NO_CACHE_DIR=1
WORKDIR /wheels
RUN apt-get update && apt-get install -y --no-install-recommends build-essential gcc libpq-dev \
  && rm -rf /var/lib/apt/lists/*
COPY requirements/base.txt requirements/prod.txt /tmp/req/
RUN python -m pip install --upgrade pip wheel \
  && pip wheel -r /tmp/req/prod.txt

# ---- RUNTIME : image finale légère ----
FROM python:3.11-slim
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1
WORKDIR /app

# libs runtime (psycopg2)
RUN apt-get update && apt-get install -y --no-install-recommends libpq5 \
  && rm -rf /var/lib/apt/lists/*

# installe les wheels construites
COPY --from=builder /wheels /wheels
RUN python -m pip install --upgrade pip \
  && pip install /wheels/* \
  && pip install gunicorn uvicorn

# code app
COPY backend/ /app/

# ENV pour Render/prod
ENV DJANGO_SETTINGS_MODULE=config.settings.prod \
    PYTHONHASHSEED=random

# Expose le port fourni par Render (PORT), fallback 8000 local
EXPOSE 8000
ENV PORT=8000

# Commande ASGI (proxy headers + forwarded IPs)
CMD bash -lc "gunicorn config.asgi:application \
  -k uvicorn.workers.UvicornWorker \
  --bind 0.0.0.0:${PORT} \
  --workers=${WORKERS:-2} \
  --threads=${THREADS:-4} \
  --timeout=60 \
  --access-logfile - \
  --forwarded-allow-ips='*' \
  --proxy-allow-from='*'"
